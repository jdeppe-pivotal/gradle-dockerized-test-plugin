import com.amazonaws.auth.*
import com.amazonaws.auth.profile.*

buildscript {

    repositories {
        mavenCentral()
    }
    dependencies{

        classpath 'com.amazonaws:aws-java-sdk-core:1.11.5'
    }


}



plugins {
    id "com.gradle.plugin-publish" version "0.10.0"
    id 'java-gradle-plugin'
}
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'

group = 'com.pedjak.gradle.plugins'
version = '0.5.7-GEODE'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.maven:maven-artifact:3.3.3'
    compile 'io.netty:netty-handler-proxy:4.1.22.Final'
    compile 'io.netty:netty-codec-http:4.1.22.Final'
    compile 'io.netty:netty-handler:4.1.22.Final'
    compile 'io.netty:netty-transport-native-epoll:4.1.22.Final'
    compile 'io.netty:netty-transport-native-kqueue:4.1.22.Final'
    compile 'com.github.docker-java:docker-java:3.1.2-GEODE'

    testCompile ("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude module: "groovy-all"
    }
}

gradlePlugin {
    plugins {
        simplePlugin {
            id = "com.github.pedjak.dockerized-test"
            implementationClass = "com.pedjak.gradle.plugins.dockerizedtest.DockerizedTestPlugin"
        }
    }
}

pluginBundle {
    website = 'https://github.com/pedjak/gradle-dockerized-test-plugin'
    vcsUrl = 'https://github.com/pedjak/gradle-dockerized-test-plugin'
    description = 'Running tests inside a docker image'
    tags = ["docker", 'test', 'integration-test']

    plugins {
        greetingsPlugin {
            displayName = 'dockerized-test'
        }
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

sourceSets {
    main {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs += ['src/main/java']
        }
    }
}

def fetchAwsCredentials = {
    try {
        return new ProfileCredentialsProvider().credentials
    } catch (Exception e) {
        logger.debug('Unable to retrieve AWS credentials from profile, publishing to S3 will not be available.', e)
        return null
    }
}
AWSCredentials awsCredentials = fetchAwsCredentials()

publishing {
    repositories {
        maven {
            url "s3://geode-maven/"
            credentials(AwsCredentials) {
                accessKey = awsCredentials.AWSAccessKeyId
                secretKey = awsCredentials.AWSSecretKey
            }
        }
    }
}
